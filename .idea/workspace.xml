<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="2d2908ec-3687-40f0-b10f-71a8004fe325" name="Changes" comment="" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="Git.Settings">
    <favorite-branches>
      <branch-storage>
        <map>
          <entry type="REMOTE">
            <value>
              <list>
                <branch-info repo="$PROJECT_DIR$" source="origin/hib-operation" />
              </list>
            </value>
          </entry>
        </map>
      </branch-storage>
    </favorite-branches>
    <option name="RECENT_BRANCH_BY_REPOSITORY">
      <map>
        <entry key="$PROJECT_DIR$" value="master" />
      </map>
    </option>
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="GitHubPullRequestSearchHistory">{
  &quot;lastFilter&quot;: {
    &quot;state&quot;: &quot;OPEN&quot;,
    &quot;assignee&quot;: &quot;trumpetman-r&quot;
  }
}</component>
  <component name="GithubPullRequestsUISettings">{
  &quot;selectedUrlAndAccountId&quot;: {
    &quot;url&quot;: &quot;https://github.com/trumpetman-r/testbd-PP.git&quot;,
    &quot;accountId&quot;: &quot;289d24fe-0973-4ca3-ad7e-e7534ebc630e&quot;
  }
}</component>
  <component name="ProjectColorInfo">{
  &quot;associatedIndex&quot;: 3
}</component>
  <component name="ProjectId" id="2hYSdRuerFFcVyTuXRVMxW6hKIV" />
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent"><![CDATA[{
  "keyToString": {
    "RunOnceActivity.ShowReadmeOnStart": "true",
    "git-widget-placeholder": "hib-operation",
    "kotlin-language-version-configured": "true",
    "last_opened_file_path": "D:/java/JDBC/testdb-113",
    "node.js.detected.package.eslint": "true",
    "node.js.detected.package.tslint": "true",
    "node.js.selected.package.eslint": "(autodetect)",
    "node.js.selected.package.tslint": "(autodetect)",
    "nodejs_package_manager_path": "npm",
    "vue.rearranger.settings.migration": "true"
  },
  "keyToStringList": {
    "DatabaseDriversLRU": [
      "mysql"
    ]
  }
}]]></component>
  <component name="SharedIndexes">
    <attachedChunks>
      <set>
        <option value="bundled-jdk-9f38398b9061-39b83d9b5494-intellij.indexing.shared.core-IU-241.15989.150" />
        <option value="bundled-js-predefined-1d06a55b98c1-91d5c284f522-JavaScript-IU-241.15989.150" />
      </set>
    </attachedChunks>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="2d2908ec-3687-40f0-b10f-71a8004fe325" name="Changes" comment="" />
      <created>1717769605164</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1717769605164</updated>
      <workItem from="1717769606431" duration="293000" />
      <workItem from="1718199237530" duration="2806000" />
    </task>
    <servers />
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
  <component name="com.github.evgenys91.machinet.common.dslhistory.DslHistoryState">
    <option name="historyDtoById">
      <map>
        <entry key="0528b5">
          <value>
            <ChatHistoryModel>
              <option name="contextFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/pom.xml" />
                  <option value="$PROJECT_DIR$/src/main/java/jm/task/core/jdbc/dao/UserHibernateDaoImpl.java" />
                  <option value="$PROJECT_DIR$/src/main/java/jm/task/core/jdbc/service/UserServiceImpl.java" />
                </list>
              </option>
              <option name="id" value="0528b5" />
              <option name="initiateTms" value="1717769765695" />
              <option name="request" value=" подскажи, пожалуйста, мой проект реализует jdbc или hibernate?" />
              <option name="response" value="" />
              <option name="responseDescription" value="&lt;em&gt;Dynamic context. Adding files:&lt;br/&gt;&lt;/em&gt;&lt;em&gt;&#10;-src/main/java/jm/task/core/jdbc/dao/UserHibernateDaoImpl.java&#10;-src/main/java/jm/task/core/jdbc/service/UserServiceImpl.java.&#10;&lt;/em&gt;&lt;em&gt;&#10;&#10;&lt;/em&gt;Ваш проект использует Hibernate для работы с базой данных. Это видно из следующих моментов:&#10;&#10;1. **Зависимости в `pom.xml`**:&#10;    - Вы подключили зависимости для Hibernate:&#10;      ```xml&#10;      &lt;dependency&gt;&#10;          &lt;groupId&gt;org.hibernate&lt;/groupId&gt;&#10;          &lt;artifactId&gt;hibernate-core&lt;/artifactId&gt;&#10;          &lt;version&gt;5.6.3.Final&lt;/version&gt;&#10;      &lt;/dependency&gt;&#10;      &lt;dependency&gt;&#10;          &lt;groupId&gt;org.hibernate.javax.persistence&lt;/groupId&gt;&#10;          &lt;artifactId&gt;hibernate-jpa-2.1-api&lt;/artifactId&gt;&#10;          &lt;version&gt;1.0.2.Final&lt;/version&gt;&#10;      &lt;/dependency&gt;&#10;      ```&#10;&#10;2. **Класс `UserHibernateDaoImpl`**:&#10;    - В этом классе вы используете Hibernate-сессии для выполнения операций с базой данных:&#10;      ```java&#10;      try (Session session = Util.getSessionFactory().openSession()) {&#10;          Transaction transaction = session.beginTransaction();&#10;          session.createSQLQuery(&quot;&quot;&quot;&#10;                  CREATE TABLE IF NOT EXISTS USER (&#10;                      id BIGINT AUTO_INCREMENT PRIMARY KEY,&#10;                      name VARCHAR(50),&#10;                      lastName VARCHAR(50),&#10;                      age TINYINT&#10;                  )&quot;&quot;&quot;).executeUpdate();&#10;          transaction.commit();&#10;      } catch (Exception e) {&#10;          e.printStackTrace();&#10;      }&#10;      ```&#10;&#10;3. **Класс `UserServiceImpl`**:&#10;    - Этот класс использует `UserHibernateDaoImpl` для выполнения операций, что также подтверждает использование Hibernate.&#10;&#10;Таким образом, ваш проект реализует взаимодействие с базой данных с помощью Hibernate. Если у вас есть дополнительные вопросы или вам нужна помощь с конкретной задачей, дайте знать!" />
              <option name="responseFileName" value="" />
              <option name="responseFilePath" value="" />
              <option name="responseTms" value="1717769791904" />
              <option name="usedLocalFilePaths">
                <list>
                  <option value="$PROJECT_DIR$/src/main/java/jm/task/core/jdbc/dao/UserHibernateDaoImpl.java" />
                  <option value="$PROJECT_DIR$/src/main/java/jm/task/core/jdbc/service/UserServiceImpl.java" />
                  <option value="$PROJECT_DIR$/pom.xml" />
                </list>
              </option>
            </ChatHistoryModel>
          </value>
        </entry>
        <entry key="609988">
          <value>
            <ChatHistoryModel>
              <option name="id" value="609988" />
              <option name="initiateTms" value="1717769740342" />
              <option name="request" value=" привет" />
              <option name="response" value="" />
              <option name="responseDescription" value="Привет! Как я могу помочь вам с вашим проектом?" />
              <option name="responseFileName" value="" />
              <option name="responseFilePath" value="" />
              <option name="responseTms" value="1717769742305" />
            </ChatHistoryModel>
          </value>
        </entry>
        <entry key="f87f22">
          <value>
            <ChatHistoryModel>
              <option name="contextFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/src/main/java/jm/task/core/jdbc/dao/UserHibernateDaoImpl.java" />
                  <option value="$PROJECT_DIR$/src/main/java/jm/task/core/jdbc/model/User.java" />
                  <option value="$PROJECT_DIR$/src/main/java/jm/task/core/jdbc/util/Util.java" />
                  <option value="$PROJECT_DIR$/src/main/java/jm/task/core/jdbc/dao/UserDao.java" />
                </list>
              </option>
              <option name="id" value="f87f22" />
              <option name="initiateTms" value="1717769821074" />
              <option name="request" value=" присутствует ли в проекте реализация jdbc?" />
              <option name="response" value="" />
              <option name="responseDescription" value="На данный момент в вашем проекте нет явной реализации JDBC (Java Database Connectivity). Ваш проект полностью использует Hibernate для взаимодействия с базой данных. Hibernate является ORM (Object-Relational Mapping) фреймворком, который абстрагирует работу с JDBC, предоставляя более высокоуровневый API для работы с базой данных.&#10;&#10;Если вы хотите добавить реализацию JDBC в ваш проект, вы можете создать отдельный DAO (Data Access Object) класс, который будет использовать чистый JDBC для выполнения операций с базой данных. Вот пример того, как это можно сделать:&#10;&#10;### Пример реализации JDBC DAO&#10;&#10;1. **Добавьте зависимости для JDBC в `pom.xml`** (если они еще не добавлены):&#10;    ```xml&#10;    &lt;dependency&gt;&#10;        &lt;groupId&gt;mysql&lt;/groupId&gt;&#10;        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;&#10;        &lt;version&gt;8.0.26&lt;/version&gt;&#10;    &lt;/dependency&gt;&#10;    ```&#10;&#10;2. **Создайте класс `UserJdbcDaoImpl`**:&#10;    ```java&#10;    package jm.task.core.jdbc.dao;&#10;&#10;    import jm.task.core.jdbc.model.User;&#10;    import jm.task.core.jdbc.util.Util;&#10;&#10;    import java.sql.Connection;&#10;    import java.sql.PreparedStatement;&#10;    import java.sql.ResultSet;&#10;    import java.sql.Statement;&#10;    import java.util.ArrayList;&#10;    import java.util.List;&#10;&#10;    public class UserJdbcDaoImpl implements UserDao {&#10;&#10;        @Override&#10;        public void createUsersTable() {&#10;            String sql = &quot;&quot;&quot;&#10;                CREATE TABLE IF NOT EXISTS USER (&#10;                    id BIGINT AUTO_INCREMENT PRIMARY KEY,&#10;                    name VARCHAR(50),&#10;                    lastName VARCHAR(50),&#10;                    age TINYINT&#10;                )&quot;&quot;&quot;;&#10;&#10;            try (Connection connection = Util.getConnection();&#10;                 Statement statement = connection.createStatement()) {&#10;                statement.execute(sql);&#10;            } catch (Exception e) {&#10;                e.printStackTrace();&#10;            }&#10;        }&#10;&#10;        @Override&#10;        public void dropUsersTable() {&#10;            String sql = &quot;DROP TABLE IF EXISTS USER&quot;;&#10;&#10;            try (Connection connection = Util.getConnection();&#10;                 Statement statement = connection.createStatement()) {&#10;                statement.execute(sql);&#10;            } catch (Exception e) {&#10;                e.printStackTrace();&#10;            }&#10;        }&#10;&#10;        @Override&#10;        public void saveUser(String name, String lastName, byte age) {&#10;            String sql = &quot;INSERT INTO USER (name, lastName, age) VALUES (?, ?, ?)&quot;;&#10;&#10;            try (Connection connection = Util.getConnection();&#10;                 PreparedStatement preparedStatement = connection.prepareStatement(sql)) {&#10;                preparedStatement.setString(1, name);&#10;                preparedStatement.setString(2, lastName);&#10;                preparedStatement.setByte(3, age);&#10;                preparedStatement.executeUpdate();&#10;            } catch (Exception e) {&#10;                e.printStackTrace();&#10;            }&#10;        }&#10;&#10;        @Override&#10;        public void removeUserById(long id) {&#10;            String sql = &quot;DELETE FROM USER WHERE id = ?&quot;;&#10;&#10;            try (Connection connection = Util.getConnection();&#10;                 PreparedStatement preparedStatement = connection.prepareStatement(sql)) {&#10;                preparedStatement.setLong(1, id);&#10;                preparedStatement.executeUpdate();&#10;            } catch (Exception e) {&#10;                e.printStackTrace();&#10;            }&#10;        }&#10;&#10;        @Override&#10;        public List&lt;User&gt; getAllUsers() {&#10;            List&lt;User&gt; users = new ArrayList&lt;&gt;();&#10;            String sql = &quot;SELECT * FROM USER&quot;;&#10;&#10;            try (Connection connection = Util.getConnection();&#10;                 Statement statement = connection.createStatement();&#10;                 ResultSet resultSet = statement.executeQuery(sql)) {&#10;                while (resultSet.next()) {&#10;                    User user = new User();&#10;                    user.setId(resultSet.getLong(&quot;id&quot;));&#10;                    user.setName(resultSet.getString(&quot;name&quot;));&#10;                    user.setLastName(resultSet.getString(&quot;lastName&quot;));&#10;                    user.setAge(resultSet.getByte(&quot;age&quot;));&#10;                    users.add(user);&#10;                }&#10;            } catch (Exception e) {&#10;                e.printStackTrace();&#10;            }&#10;&#10;            return users;&#10;        }&#10;&#10;        @Override&#10;        public void cleanUsersTable() {&#10;            String sql = &quot;TRUNCATE TABLE USER&quot;;&#10;&#10;            try (Connection connection = Util.getConnection();&#10;                 Statement statement = connection.createStatement()) {&#10;                statement.execute(sql);&#10;            } catch (Exception e) {&#10;                e.printStackTrace();&#10;            }&#10;        }&#10;    }&#10;    ```&#10;&#10;3. **Обновите класс `Util` для предоставления JDBC соединения**:&#10;    ```java&#10;    package jm.task.core.jdbc.util;&#10;&#10;    import java.sql.Connection;&#10;    import java.sql.DriverManager;&#10;    import java.sql.SQLException;&#10;&#10;    public class Util {&#10;        private static final String URL = &quot;jdbc:mysql://localhost:3306/testdb&quot;;&#10;        private static final String USER = &quot;root_r&quot;;&#10;        private static final String PASSWORD = &quot;root_r&quot;;&#10;&#10;        public static Connection getConnection() {&#10;            try {&#10;                return DriverManager.getConnection(URL, USER, PASSWORD);&#10;            } catch (SQLException e) {&#10;                e.printStackTrace();&#10;                throw new RuntimeException(&quot;Error connecting to the database&quot;, e);&#10;            }&#10;        }&#10;    }&#10;    ```&#10;&#10;Теперь у вас будет реализация DAO с использованием как Hibernate (`UserHibernateDaoImpl`), так и JDBC (`UserJdbcDaoImpl`). Вы можете использовать любой из них в зависимости от ваших потребностей." />
              <option name="responseFileName" value="" />
              <option name="responseFilePath" value="" />
              <option name="responseTms" value="1717769857598" />
              <option name="usedLocalFilePaths">
                <list>
                  <option value="$PROJECT_DIR$/src/main/java/jm/task/core/jdbc/model/User.java" />
                  <option value="$PROJECT_DIR$/src/main/java/jm/task/core/jdbc/util/Util.java" />
                  <option value="$PROJECT_DIR$/src/main/java/jm/task/core/jdbc/dao/UserHibernateDaoImpl.java" />
                  <option value="$PROJECT_DIR$/src/main/java/jm/task/core/jdbc/dao/UserDao.java" />
                </list>
              </option>
            </ChatHistoryModel>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>